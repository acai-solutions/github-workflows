name: Terraform Security Checks

on:
  workflow_call:
    inputs:
      concurrency_group:
        description: "Name of concurrency group to manage concurrent github action runs"
        default: ${{ github.repository }}/${{ github.event.pull_request.head.ref || github.ref }}
        required: false
        type: string
      runner_type:
        description: "Type of runner (GitHub-hosted or self-hosted)"
        required: false
        default: "ubuntu-latest"
        type: string
      # GitHub Workflow config repo details
      gh_wf_config_repo:
        description: "Public repo where tflint config is stored"
        default: "acai-solutions/github-workflow-configs"
        required: false
        type: string
      gh_wf_config_repo_ref:
        description: "Ref or branch of gh_wf_config_repo"
        default: "main"
        required: false
        type: string

      linting_include:
        description: "Whether to include Python or TFLint code quality checks"
        required: false
        default: true
        type: boolean
      linting_allow_failures:
        description: "Whether to allow Python linting failures to pass the pipeline"
        required: false
        default: false
        type: boolean

      tf_lint_config_path:
        description: 'Path to tflint config in gh_wf_config_repo (e.g. "aws/.tflint.hcl")'
        default: ".tflint.hcl"
        required: false
        type: string
      tf_lint_version:
        description: "Tflint version to use"
        default: "latest"
        required: false
        type: string
      trivy_version:
        description: "Trivy version to use"
        default: "latest"
        required: false
        type: string
      checkov_failures_allow:
        description: "Whether to abort the workflow if Checkov checks fail"
        required: false
        default: false
        type: boolean
    outputs:
      all_checks_passed:
        description: "Indicates if all security checks passed successfully"
        value: ${{ jobs.tf_security_checks.outputs.all_checks_passed }}

jobs:
  tf_security_checks:
    runs-on: ${{ inputs.runner_type }}
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      checks: write            # Added so reviewdog + junit report can create check runs
    outputs:
      all_checks_passed: ${{ steps.determine_status.outputs.all_passed }}
      tflint_status: ${{ steps.tflint.outcome }}
      trivy_status: ${{ steps.trivy_reviewdog.outcome || steps.trivy_scan.outcome }}   # Fixed
      checkov_status: ${{ steps.checkov.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up TFLint
        if: ${{ inputs.linting_include }}
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: ${{ inputs.tf_lint_version }}

      - name: Get TFLint Config
        if: ${{ inputs.linting_include }}
        run: |
          echo "Fetching TFLint config from: ${{ inputs.gh_wf_config_repo }}/${{ inputs.tf_lint_config_path }}@${{ inputs.gh_wf_config_repo_ref }}"
          
          # Try to download the config file
          HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Accept: application/vnd.github.v3.raw" \
            "https://api.github.com/repos/${{ inputs.gh_wf_config_repo }}/contents/${{ inputs.tf_lint_config_path }}?ref=${{ inputs.gh_wf_config_repo_ref }}")
          
          HTTP_CODE=$(echo "$HTTP_RESPONSE" | tail -n 1)
          CONTENT=$(echo "$HTTP_RESPONSE" | head -n -1)
          
          if [[ "$HTTP_CODE" == "200" ]]; then
            echo "$CONTENT" > .tflint.hcl
            echo "✅ Successfully downloaded TFLint config"
            echo "Content preview:"
            head -20 .tflint.hcl
          elif [[ "$HTTP_CODE" == "404" ]]; then
            echo "⚠️ TFLint config not found at specified location. Using default minimal config."
            cat > .tflint.hcl << 'EOF'
          # Default minimal TFLint configuration
          plugin "terraform" {
            enabled = true
            preset  = "recommended"
          }
          
          rule "terraform_naming_convention" {
            enabled = true
          }
          
          rule "terraform_documented_outputs" {
            enabled = true
          }
          
          rule "terraform_documented_variables" {
            enabled = true
          }
          EOF
          else
            echo "❌ Failed to download TFLint config. HTTP Status: $HTTP_CODE"
            echo "Response: $CONTENT"
            echo "Using default minimal config."
            cat > .tflint.hcl << 'EOF'
          # Default minimal TFLint configuration
          plugin "terraform" {
            enabled = true
            preset  = "recommended"
          }
          EOF
          fi

      - name: Initialize TFLint
        if: ${{ inputs.linting_include }}
        run: |
          echo "Initializing TFLint with config:"
          cat .tflint.hcl
          echo ""
          tflint --init

      - name: Run TFLint (Code Quality)
        if: ${{ inputs.linting_include }}
        id: tflint
        continue-on-error: ${{ inputs.linting_allow_failures }}
        run: |
          # Run TFLint and capture the exit code
          tflint --format compact --minimum-failure-severity=error || TFLINT_EXIT_CODE=$?
          
          # Check if we should fail on linting issues
          if [[ "${{ inputs.linting_allow_failures }}" == "false" ]] && [[ "${TFLINT_EXIT_CODE:-0}" -ne 0 ]]; then
            echo "❌ TFLint found issues and linting_allow_failures is false"
            exit ${TFLINT_EXIT_CODE}
          else
            echo "✅ TFLint completed (exit code: ${TFLINT_EXIT_CODE:-0})"
            if [[ "${TFLINT_EXIT_CODE:-0}" -ne 0 ]]; then
              echo "⚠️ Issues found but continuing as linting_allow_failures is true"
            fi
            exit 0
          fi

      # --- Trivy (for PRs: reviewdog, for pushes/schedules: SARIF) ---
      - name: Run Trivy (PR annotations via reviewdog)
        if: ${{ github.event_name == 'pull_request' }}
        id: trivy_reviewdog
        continue-on-error: true
        uses: reviewdog/action-trivy@v1.14.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter
          level: error
          flags: ""
          trivy_flags: "--severity CRITICAL,HIGH --timeout 10m --skip-dirs examples,.terraform"
          trivy_command: config
          trivy_target: .
          trivy_version: ${{ inputs.trivy_version }}

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          version: ${{ inputs.trivy_version }}

      # https://github.com/marketplace/actions/aqua-security-trivy
      - name: Run Trivy Security Scan (SARIF)
        if: ${{ github.event_name != 'pull_request' }}
        id: trivy_scan
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: config
          scan-ref: .
          format: sarif
          output: trivy-results.sarif
          exit-code: 1
          severity: CRITICAL,HIGH
          timeout: 10m
          skip-dirs: examples,.terraform

      - name: Upload Trivy SARIF to Code Scanning
        if: ${{ github.event_name != 'pull_request' && always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Run Checkov Security Scan
        id: checkov
        continue-on-error: ${{ inputs.checkov_failures_allow }}
        uses: bridgecrewio/checkov-action@v12    
        env:
          # Force Checkov to treat the current branch as both FROM and TO to avoid "main" annotations
          BC_FROM_BRANCH: ${{ github.event.pull_request.head.ref || github.ref_name }}
          BC_TO_BRANCH: ${{ github.event.pull_request.head.ref || github.ref_name }}
          BC_COMMIT_HASH: ${{ github.sha }}
        with:
          directory: .
          framework: terraform
          output_format: cli,junitxml
          output_file_path: console,checkov-report.xml
          quiet: true
          soft_fail: ${{ inputs.checkov_failures_allow }}

      - name: Publish Checkov Test Results
        uses: mikepenz/action-junit-report@v5
        if: always()
        with:
          check_name: Checkov Security Test Results
          report_paths: checkov-report.xml
          fail_on_failure: true
          require_tests: false

      - name: Summarize Checkov Report
        if: always()
        run: |
          if [ -f checkov-report.xml ]; then
            echo "Checkov scan completed. JUnit XML report generated."
            # Add any additional report processing here
          else
            echo "No Checkov report found."
          fi

      - name: Determine Overall Status
        id: determine_status
        if: always()
        run: |
          TFLINT_RESULT="${{ steps.tflint.outcome }}"
          TRIVY_RESULT="${{ steps.trivy_reviewdog.outcome || steps.trivy_scan.outcome }}"
          CHECKOV_RESULT="${{ steps.checkov.outcome }}"

          if [[ "${{ inputs.linting_include }}" == "true" && "$TFLINT_RESULT" != "success" ]]; then
            echo "all_passed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [[ "$TRIVY_RESULT" != "success" ]]; then
            echo "all_passed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [[ "${{ inputs.checkov_failures_allow }}" == "false" && "$CHECKOV_RESULT" != "success" ]]; then
            echo "all_passed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "all_passed=true" >> "$GITHUB_OUTPUT"

  tf_security_checks_summary:
    needs: tf_security_checks
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Output Summary
        run: |
          echo '# 🔒 Terraform Security Checks' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '## Security Scan Results' >> $GITHUB_STEP_SUMMARY
          echo '| Check | Status | Result |' >> $GITHUB_STEP_SUMMARY
          echo '|-------|--------|--------|' >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.linting_include }}" == "true" ]]; then
            echo "| 🔍 TFLint (Code Quality) | ${{ needs.tf_security_checks.outputs.tflint_status }} | ${{ needs.tf_security_checks.outputs.tflint_status == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| 🛡️ Trivy (Security) | ${{ needs.tf_security_checks.outputs.trivy_status }} | ${{ needs.tf_security_checks.outputs.trivy_status == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Checkov (Compliance) | ${{ needs.tf_security_checks.outputs.checkov_status }} | ${{ needs.tf_security_checks.outputs.checkov_status == 'success' && '✅ Passed' || (inputs.checkov_failures_allow && '⚠️ Failed (Allowed)' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.tf_security_checks.outputs.all_checks_passed }}" == "true" ]]; then
            echo "**🎉 Overall Result: ✅ All security checks passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**⚠️ Overall Result: ❌ Some security checks failed**" >> $GITHUB_STEP_SUMMARY
          fi
