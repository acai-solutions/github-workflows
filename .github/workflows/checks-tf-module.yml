---
name: Terraform Module Checks
on:
  workflow_call:
    inputs:
      concurrency_group:
        description: Name of concurrency group to manage concurrent github action runs
        default: ${{ github.repository }}/${{ github.head_ref || github.ref_name }}
        required: false
        type: string
      runner_type:
        description: Type of runner (GitHub-hosted or self-hosted)
        required: false
        default: ubuntu-latest
        type: string
      commit_user:
        description: Username which should be used for commits by github action
        default: github-actions
        required: false
        type: string
      commit_email:
        description: Email which should be used for commits by github action
        default: noreply@github.com
        required: false
        type: string

      # GitHub Workflow Config Repo  
      gh_wf_config_repo:
        description: Public repo where GitHub workflow config is stored
        default: acai-solutions/github-workflow-configs
        required: false
        type: string
      gh_wf_config_repo_ref:
        description: Ref or branch of gh_wf_config_repo
        default: main
        required: false
        type: string

      # Linting inputs
      linting_include:
        description: Whether to include TFLint code quality checks
        required: false
        default: true
        type: boolean
      linting_allow_failures:
        description: Whether to allow linting failures to pass the pipeline
        required: false
        default: false
        type: boolean

      # Python inputs
      python_version:
        description: Python version
        default: "3.11"
        required: false
        type: string

      # Terraform inputs
      tf_version:
        description: Terraform version used for formatting and docs
        default: latest
        required: false
        type: string
      tf_lint_config_path:
        description: Path to tflint config in gh_wf_config_repo (e.g. "aws/.tflint.hcl")
        default: .tflint.hcl
        required: false
        type: string
      tf_lint_version:
        description: Tflint version to use
        default: latest
        required: false
        type: string
      tf_trivy_version:
        description: Trivy version to use
        default: latest
        required: false
        type: string
      tf_checkov_failures_allow:
        description: Whether to abort the workflow if Checkov checks fail
        required: false
        default: false
        type: boolean

      # Test inputs
      run_tests:
        description: Whether to run Terraform (Terratest) tests
        required: false
        default: true
        type: boolean
      terratest_config_repo_path:
        description: 'Path to terratest matrix json config in terratest_config_repo/terraform/terratest/ (e.g. "aws/matrix.json")'
        default: "aws/matrix_tf1x5x7_aws5x100x0.json"
        required: false
        type: string
      terratest_path:
        description: "Path to terratest directory"
        default: "test/terratest"
        required: false
        type: string
      terratest_examples_path:
        description: "Path to terratest examples directory"
        default: "examples"
        required: false
        type: string
    secrets:
      GH_REPO_READ_APP_ID:
        required: true
      GH_REPO_READ_APP_PRIVATE_KEY:
        required: true
      TFC_API_TOKEN:
        required: true
      AWS_TESTBED_ACCESS_KEY_ID:
        required: true
      AWS_TESTBED_SECRET_ACCESS_KEY:
        required: true
      AWS_TESTBED_DEFAULT_REGION:
        required: true

    outputs:
      all_checks_passed:
        description: Indicates if all pipeline steps passed successfully
        value: ${{ jobs.terraform_base.outputs.all_checks_passed == 'true' &&
          jobs.terraform_security.outputs.all_checks_passed == 'true' &&
          (inputs.run_tests != true || jobs.terraform_module_test.outputs.all_checks_passed == 'true') }}
      terraform_base_status:
        description: Terraform base pipeline status
        value: ${{ jobs.terraform_base.outputs.all_checks_passed }}
      security_status:
        description: Security checks status
        value: ${{ jobs.terraform_security.outputs.all_checks_passed }}
      security_test_status:
        description: Security checks status
        value: ${{ jobs.terraform_security.outputs.all_checks_passed }}

# Replace scalar with object to namespace and optionally cancel prior runs
concurrency:
  group: ${{ format('{0}:{1}', inputs.concurrency_group, github.workflow) }}
  cancel-in-progress: true

jobs:
  terraform_base:
    if: ${{ always() }}
    uses: acai-solutions/github-workflows/.github/workflows/tf-base.yml@main
    with:
      concurrency_group: ${{ inputs.concurrency_group }}
      runner_type: ${{ inputs.runner_type }}
      commit_user: ${{ inputs.commit_user }}
      commit_email: ${{ inputs.commit_email }}
      tf_version: ${{ inputs.tf_version }}

  terraform_security:
    needs:
      - terraform_base
    if: ${{ needs.terraform_base.result == 'success' }}
    uses: acai-solutions/github-workflows/.github/workflows/tf-security.yml@main
    with:
      concurrency_group: ${{ inputs.concurrency_group }}
      runner_type: ${{ inputs.runner_type }}
      gh_wf_config_repo: ${{ inputs.gh_wf_config_repo }}
      gh_wf_config_repo_ref: ${{ inputs.gh_wf_config_repo_ref }}
      linting_include: ${{ inputs.linting_include }}
      linting_allow_failures: ${{ inputs.linting_allow_failures }}
      tf_lint_config_path: ${{ inputs.tf_lint_config_path }}
      tf_lint_version: ${{ inputs.tf_lint_version }}
      trivy_version: ${{ inputs.tf_trivy_version }}
      checkov_failures_allow: ${{ inputs.tf_checkov_failures_allow }}
       
  terraform_module_test:
    needs:
      - terraform_security
    uses: acai-solutions/github-workflows/.github/workflows/tf-module-test.yml@main
    if: ${{ inputs.run_tests && needs.terraform_security.outputs.all_checks_passed == 'true' }}
    with:
      terratest_config_repo: ${{ inputs.gh_wf_config_repo }}
      terratest_config_repo_ref: ${{ inputs.gh_wf_config_repo_ref }}
      terratest_config_repo_path: ${{ inputs.terratest_config_repo_path }}
      terratest_path : ${{ inputs.terratest_path }}
      terratest_examples_path: ${{ inputs.terratest_examples_path }}
    secrets: 
      GH_REPO_READ_APP_ID: ${{ secrets.GH_REPO_READ_APP_ID }}
      GH_REPO_READ_APP_PRIVATE_KEY: ${{ secrets.GH_REPO_READ_APP_PRIVATE_KEY }}
      TFC_API_TOKEN: ${{ secrets.TFC_API_TOKEN }}
      AWS_TESTBED_ACCESS_KEY_ID: ${{ secrets.AWS_TESTBED_ACCESS_KEY_ID }}
      AWS_TESTBED_SECRET_ACCESS_KEY: ${{ secrets.AWS_TESTBED_SECRET_ACCESS_KEY }}
      AWS_TESTBED_DEFAULT_REGION: ${{ secrets.AWS_TESTBED_DEFAULT_REGION }}
      
  tf_module_checks_summary:
    needs:
      - terraform_base
      - terraform_security
      - terraform_module_test
    runs-on: ${{ inputs.runner_type }}
    if: always()
    steps:
      - name: Generate Overall Summary
        run: |
          echo '# 📊 Terraform Module Checks - Overall Summary' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '## Pipeline Results' >> $GITHUB_STEP_SUMMARY
          echo '| Component | Status |' >> $GITHUB_STEP_SUMMARY
          echo '|-----------|--------|' >> $GITHUB_STEP_SUMMARY

          echo "| 📝 Terraform Base (Format & Docs) | ${{ needs.terraform_base.outputs.all_checks_passed == 'true' && '✅ Passed' || needs.terraform_base.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Terraform Security Checks | ${{ needs.terraform_security.outputs.all_checks_passed == 'true' && '✅ Passed' || needs.terraform_security.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.run_tests }}" == "true" ]]; then
            echo "| 🧪 Terraform Tests | ${{ needs.terraform_module_test.outputs.all_checks_passed == 'true' && '✅ Passed' || needs.terraform_module_test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo '' >> $GITHUB_STEP_SUMMARY

          TF_BASE_PASSED="${{ needs.terraform_base.outputs.all_checks_passed == 'true' }}"
          TF_SECURITY_PASSED="${{ needs.terraform_security.outputs.all_checks_passed == 'true' }}"
          TF_TESTS_PASSED="${{ inputs.run_tests != true || needs.terraform_module_test.outputs.all_checks_passed == 'true' }}"

          if [[ "$TF_BASE_PASSED" == "true" && "$TF_SECURITY_PASSED" == "true" && "$TF_TESTS_PASSED" == "true" ]]; then
            echo "**🎉 Overall Result: ✅ All checks passed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**⚠️ Overall Result: ❌ Some checks failed. Please review the detailed results above.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Components:" >> $GITHUB_STEP_SUMMARY
            
            if [[ "$TF_BASE_PASSED" != "true" ]]; then
              echo "- Terraform Base (Format & Docs)" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$TF_SECURITY_PASSED" != "true" ]]; then
              echo "- Security Checks" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "${{ inputs.run_tests }}" == "true" && "$TF_TESTS_PASSED" != "true" ]]; then
              echo "- Terraform Tests" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Check Overall Status
        if: always()
        run: |
          TF_BASE_PASSED="${{ needs.terraform_base.outputs.all_checks_passed == 'true' }}"
          TF_SECURITY_PASSED="${{ needs.terraform_security.outputs.all_checks_passed == 'true' }}"
          TF_TESTS_PASSED="${{ inputs.run_tests != true || needs.terraform_module_test.outputs.all_checks_passed == 'true' }}"
          
          if [[ "$TF_BASE_PASSED" != "true" ]] || \
             [[ "$TF_SECURITY_PASSED" != "true" ]] || \
             [[ "$TF_TESTS_PASSED" != "true" ]]; then
            echo "::error::Some checks failed. See summary above for details."
            exit 1
          fi
